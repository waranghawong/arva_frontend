import type { ComputedRef, PropType, ComponentPublicInstance } from 'vue';
import type { UseFuseOptions } from '@vueuse/integrations/useFuse';
import type { Group, Command, Button, Strategy } from '../../types/index.js';
declare const config: {
    wrapper: string;
    container: string;
    input: {
        wrapper: string;
        base: string;
        padding: string;
        height: string;
        size: string;
        icon: {
            base: string;
            loading: string;
            size: string;
            padding: string;
        };
        closeButton: {
            base: string;
            padding: string;
        };
    };
    emptyState: {
        wrapper: string;
        label: string;
        queryLabel: string;
        icon: string;
    };
    group: {
        wrapper: string;
        label: string;
        container: string;
        command: {
            base: string;
            active: string;
            inactive: string;
            label: string;
            prefix: string;
            suffix: string;
            container: string;
            icon: {
                base: string;
                active: string;
                inactive: string;
            };
            selectedIcon: {
                base: string;
            };
            avatar: {
                base: string;
                size: "2xs";
            };
            chip: {
                base: string;
            };
            disabled: string;
            shortcuts: string;
        };
        active: string;
        inactive: string;
    };
    default: {
        icon: string;
        loadingIcon: string;
        emptyState: {
            icon: string;
            label: string;
            queryLabel: string;
        };
        closeButton: any;
        selectedIcon: string;
    };
};
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: (StringConstructor | NumberConstructor | ObjectConstructor | ArrayConstructor)[];
        default: any;
    };
    by: {
        type: StringConstructor;
        default: string;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    nullable: {
        type: BooleanConstructor;
        default: boolean;
    };
    searchable: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    groups: {
        type: PropType<Group[]>;
        default: () => any[];
    };
    icon: {
        type: StringConstructor;
        default: () => string;
    };
    loadingIcon: {
        type: StringConstructor;
        default: () => string;
    };
    selectedIcon: {
        type: StringConstructor;
        default: () => string;
    };
    closeButton: {
        type: PropType<Button>;
        default: () => Button;
    };
    emptyState: {
        type: PropType<{
            icon: string;
            label: string;
            queryLabel: string;
        }>;
        default: () => {
            icon: string;
            label: string;
            queryLabel: string;
        };
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    groupAttribute: {
        type: StringConstructor;
        default: string;
    };
    commandAttribute: {
        type: StringConstructor;
        default: string;
    };
    autoselect: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoclear: {
        type: BooleanConstructor;
        default: boolean;
    };
    debounce: {
        type: NumberConstructor;
        default: number;
    };
    fuse: {
        type: PropType<UseFuseOptions<Command>>;
        default: () => {};
    };
    class: {
        type: PropType<any>;
        default: () => string;
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}, {
    ui: ComputedRef<{
        wrapper: string;
        container: string;
        input: {
            wrapper: string;
            base: string;
            padding: string;
            height: string;
            size: string;
            icon: {
                base: string;
                loading: string;
                size: string;
                padding: string;
            };
            closeButton: {
                base: string;
                padding: string;
            };
        };
        emptyState: {
            wrapper: string;
            label: string;
            queryLabel: string;
            icon: string;
        };
        group: {
            wrapper: string;
            label: string;
            container: string;
            command: {
                base: string;
                active: string;
                inactive: string;
                label: string;
                prefix: string;
                suffix: string;
                container: string;
                icon: {
                    base: string;
                    active: string;
                    inactive: string;
                };
                selectedIcon: {
                    base: string;
                };
                avatar: {
                    base: string;
                    size: "2xs";
                };
                chip: {
                    base: string;
                };
                disabled: string;
                shortcuts: string;
            };
            active: string;
            inactive: string;
        };
        default: {
            icon: string;
            loadingIcon: string;
            emptyState: {
                icon: string;
                label: string;
                queryLabel: string;
            };
            closeButton: any;
            selectedIcon: string;
        };
    }>;
    attrs: ComputedRef<Pick<{
        [x: string]: unknown;
    }, string>>;
    groups: ComputedRef<(Group | {
        commands: Command[];
        key: string;
        active?: string;
        inactive?: string;
        search?: (...args: any[]) => any[] | Promise<any[]>;
        filter?: (...args: any[]) => Command[];
        static?: Boolean;
    })[]>;
    comboboxInput: import("vue").Ref<ComponentPublicInstance<HTMLInputElement>>;
    query: import("vue").Ref<string>;
    iconName: ComputedRef<string>;
    iconClass: ComputedRef<string>;
    emptyState: ComputedRef<{
        icon: string;
        label: string;
        queryLabel: string;
    }>;
    onSelect: (option: Command | Command[]) => void;
    onClear: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("close" | "update:modelValue")[], "close" | "update:modelValue", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: (StringConstructor | NumberConstructor | ObjectConstructor | ArrayConstructor)[];
        default: any;
    };
    by: {
        type: StringConstructor;
        default: string;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    nullable: {
        type: BooleanConstructor;
        default: boolean;
    };
    searchable: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    groups: {
        type: PropType<Group[]>;
        default: () => any[];
    };
    icon: {
        type: StringConstructor;
        default: () => string;
    };
    loadingIcon: {
        type: StringConstructor;
        default: () => string;
    };
    selectedIcon: {
        type: StringConstructor;
        default: () => string;
    };
    closeButton: {
        type: PropType<Button>;
        default: () => Button;
    };
    emptyState: {
        type: PropType<{
            icon: string;
            label: string;
            queryLabel: string;
        }>;
        default: () => {
            icon: string;
            label: string;
            queryLabel: string;
        };
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    groupAttribute: {
        type: StringConstructor;
        default: string;
    };
    commandAttribute: {
        type: StringConstructor;
        default: string;
    };
    autoselect: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoclear: {
        type: BooleanConstructor;
        default: boolean;
    };
    debounce: {
        type: NumberConstructor;
        default: number;
    };
    fuse: {
        type: PropType<UseFuseOptions<Command>>;
        default: () => {};
    };
    class: {
        type: PropType<any>;
        default: () => string;
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}>> & {
    onClose?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
}, {
    class: any;
    ui: {};
    icon: string;
    closeButton: Button;
    modelValue: string | number | Record<string, any> | unknown[];
    loading: boolean;
    loadingIcon: string;
    emptyState: {
        icon: string;
        label: string;
        queryLabel: string;
    };
    by: string;
    multiple: boolean;
    placeholder: string;
    nullable: boolean;
    selectedIcon: string;
    debounce: number;
    searchable: boolean;
    groupAttribute: string;
    commandAttribute: string;
    groups: Group[];
    autoselect: boolean;
    autoclear: boolean;
    fuse: {};
}, {}>;
export default _default;
