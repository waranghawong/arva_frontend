import type { PropType } from 'vue';
import type { TabItem, Strategy } from '../../types/index.js';
declare const config: {
    wrapper: string;
    container: string;
    base: string;
    list: {
        base: string;
        background: string;
        rounded: string;
        shadow: string;
        padding: string;
        height: string;
        width: string;
        marker: {
            wrapper: string;
            base: string;
            background: string;
            rounded: string;
            shadow: string;
        };
        tab: {
            base: string;
            background: string;
            active: string;
            inactive: string;
            height: string;
            padding: string;
            size: string;
            font: string;
            rounded: string;
            shadow: string;
            icon: string;
        };
    };
};
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    orientation: {
        type: PropType<"horizontal" | "vertical">;
        default: string;
        validator: (value: string) => boolean;
    };
    defaultIndex: {
        type: NumberConstructor;
        default: number;
    };
    items: {
        type: PropType<TabItem[]>;
        default: () => any[];
    };
    unmount: {
        type: BooleanConstructor;
        default: boolean;
    };
    content: {
        type: BooleanConstructor;
        default: boolean;
    };
    class: {
        type: PropType<any>;
        default: () => string;
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}, {
    ui: import("vue").ComputedRef<{
        wrapper: string;
        container: string;
        base: string;
        list: {
            base: string;
            background: string;
            rounded: string;
            shadow: string;
            padding: string;
            height: string;
            width: string;
            marker: {
                wrapper: string;
                base: string;
                background: string;
                rounded: string;
                shadow: string;
            };
            tab: {
                base: string;
                background: string;
                active: string;
                inactive: string;
                height: string;
                padding: string;
                size: string;
                font: string;
                rounded: string;
                shadow: string;
                icon: string;
            };
        };
    }>;
    attrs: import("vue").ComputedRef<Pick<{
        [x: string]: unknown;
    }, string>>;
    listRef: import("vue").Ref<HTMLElement>;
    itemRefs: import("vue").Ref<HTMLElement[]>;
    markerRef: import("vue").Ref<HTMLElement>;
    selectedIndex: import("vue").Ref<number>;
    onChange: (index: number) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: any;
    };
    orientation: {
        type: PropType<"horizontal" | "vertical">;
        default: string;
        validator: (value: string) => boolean;
    };
    defaultIndex: {
        type: NumberConstructor;
        default: number;
    };
    items: {
        type: PropType<TabItem[]>;
        default: () => any[];
    };
    unmount: {
        type: BooleanConstructor;
        default: boolean;
    };
    content: {
        type: BooleanConstructor;
        default: boolean;
    };
    class: {
        type: PropType<any>;
        default: () => string;
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}>> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
}, {
    class: any;
    content: boolean;
    orientation: "horizontal" | "vertical";
    ui: {};
    modelValue: number;
    unmount: boolean;
    items: TabItem[];
    defaultIndex: number;
}, {}>;
export default _default;
