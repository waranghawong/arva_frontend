import type { PropType } from 'vue';
import type { Strategy } from '../../types/index.js';
declare const config: {
    wrapper: string;
    inner: string;
    container: string;
    padding: string;
    margin: string;
    base: string;
    overlay: {
        base: string;
        background: string;
        transition: {
            enter: string;
            enterFrom: string;
            enterTo: string;
            leave: string;
            leaveFrom: string;
            leaveTo: string;
        };
    };
    background: string;
    ring: string;
    rounded: string;
    shadow: string;
    width: string;
    height: string;
    fullscreen: string;
    transition: {
        enter: string;
        enterFrom: string;
        enterTo: string;
        leave: string;
        leaveFrom: string;
        leaveTo: string;
    };
};
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    appear: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    transition: {
        type: BooleanConstructor;
        default: boolean;
    };
    preventClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    fullscreen: {
        type: BooleanConstructor;
        default: boolean;
    };
    class: {
        type: PropType<any>;
        default: () => string;
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}, {
    ui: import("vue").ComputedRef<{
        wrapper: string;
        inner: string;
        container: string;
        padding: string;
        margin: string;
        base: string;
        overlay: {
            base: string;
            background: string;
            transition: {
                enter: string;
                enterFrom: string;
                enterTo: string;
                leave: string;
                leaveFrom: string;
                leaveTo: string;
            };
        };
        background: string;
        ring: string;
        rounded: string;
        shadow: string;
        width: string;
        height: string;
        fullscreen: string;
        transition: {
            enter: string;
            enterFrom: string;
            enterTo: string;
            leave: string;
            leaveFrom: string;
            leaveTo: string;
        };
    }>;
    attrs: import("vue").ComputedRef<Pick<{
        [x: string]: unknown;
    }, string>>;
    isOpen: import("vue").WritableComputedRef<boolean>;
    transitionClass: import("vue").ComputedRef<{}>;
    onAfterLeave: () => void;
    close: (value: boolean) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("close" | "update:modelValue" | "close-prevented" | "after-leave")[], "close" | "update:modelValue" | "close-prevented" | "after-leave", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    appear: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    transition: {
        type: BooleanConstructor;
        default: boolean;
    };
    preventClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    fullscreen: {
        type: BooleanConstructor;
        default: boolean;
    };
    class: {
        type: PropType<any>;
        default: () => string;
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}>> & {
    onClose?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
    "onClose-prevented"?: (...args: any[]) => any;
    "onAfter-leave"?: (...args: any[]) => any;
}, {
    class: any;
    transition: boolean;
    ui: {};
    appear: boolean;
    overlay: boolean;
    preventClose: boolean;
    fullscreen: boolean;
    modelValue: boolean;
}, {}>;
export default _default;
