import type { PropType } from 'vue';
import type { Strategy } from '../../types/index.js';
import colors from '#ui-colors';
declare const config: {
    wrapper: string;
    fieldset: string;
    legend: string;
    default: {
        color: string;
    };
};
declare const configRadio: {
    wrapper: string;
    container: string;
    base: string;
    form: string;
    color: string;
    background: string;
    border: string;
    ring: string;
    inner: string;
    label: string;
    required: string;
    help: string;
    default: {
        color: string;
    };
};
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor | ObjectConstructor)[];
        default: string;
    };
    name: {
        type: StringConstructor;
        default: any;
    };
    legend: {
        type: StringConstructor;
        default: any;
    };
    options: {
        type: ArrayConstructor;
        default: () => any[];
    };
    optionAttribute: {
        type: StringConstructor;
        default: string;
    };
    valueAttribute: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: PropType<(typeof colors)[number]>;
        default: () => string;
        validator(value: string): any;
    };
    class: {
        type: PropType<any>;
        default: () => "";
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
    uiRadio: {
        type: PropType<Partial<typeof configRadio> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}, {
    ui: import("vue").ComputedRef<{
        wrapper: string;
        fieldset: string;
        legend: string;
        default: {
            color: string;
        };
    }>;
    uiRadio: import("vue").ComputedRef<{
        wrapper: string;
        container: string;
        base: string;
        form: string;
        color: string;
        background: string;
        border: string;
        ring: string;
        inner: string;
        label: string;
        required: string;
        help: string;
        default: {
            color: string;
        };
    }>;
    attrs: import("vue").ComputedRef<Pick<{
        [x: string]: unknown;
    }, string>>;
    normalizedOptions: import("vue").ComputedRef<any[]>;
    onUpdate: (value: any) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor | ObjectConstructor)[];
        default: string;
    };
    name: {
        type: StringConstructor;
        default: any;
    };
    legend: {
        type: StringConstructor;
        default: any;
    };
    options: {
        type: ArrayConstructor;
        default: () => any[];
    };
    optionAttribute: {
        type: StringConstructor;
        default: string;
    };
    valueAttribute: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: PropType<(typeof colors)[number]>;
        default: () => string;
        validator(value: string): any;
    };
    class: {
        type: PropType<any>;
        default: () => "";
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
    uiRadio: {
        type: PropType<Partial<typeof configRadio> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}>> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
}, {
    name: string;
    class: any;
    color: "primary" | "red" | "orange" | "amber" | "yellow" | "lime" | "green" | "emerald" | "teal" | "cyan" | "sky" | "blue" | "indigo" | "violet" | "purple" | "fuchsia" | "pink" | "rose";
    disabled: boolean;
    legend: string;
    ui: {};
    options: unknown[];
    modelValue: string | number | boolean | Record<string, any>;
    optionAttribute: string;
    valueAttribute: string;
    uiRadio: {};
}, {}>;
export default _default;
