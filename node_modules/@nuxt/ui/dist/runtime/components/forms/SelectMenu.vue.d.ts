import type { PropType } from 'vue';
import type { SelectSize, SelectColor, SelectVariant, PopperOptions, Strategy } from '../../types/index.js';
declare const config: {
    form: string;
    placeholder: string;
    default: {
        size: string;
        color: string;
        variant: string;
        loadingIcon: string;
        trailingIcon: string;
    };
    wrapper: string;
    base: string;
    rounded: string;
    file: {
        base: string;
    };
    size: {
        '2xs': string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    gap: {
        '2xs': string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    padding: {
        '2xs': string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    leading: {
        padding: {
            '2xs': string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
    };
    trailing: {
        padding: {
            '2xs': string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
    };
    color: {
        white: {
            outline: string;
        };
        gray: {
            outline: string;
        };
    };
    variant: {
        outline: string;
        none: string;
    };
    icon: {
        base: string;
        color: string;
        loading: string;
        size: {
            '2xs': string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        leading: {
            wrapper: string;
            pointer: string;
            padding: {
                '2xs': string;
                xs: string;
                sm: string;
                md: string;
                lg: string;
                xl: string;
            };
        };
        trailing: {
            wrapper: string;
            pointer: string;
            padding: {
                '2xs': string;
                xs: string;
                sm: string;
                md: string;
                lg: string;
                xl: string;
            };
        };
    };
};
declare const configMenu: {
    select: string;
    input: string;
    required: string;
    label: string;
    option: {
        create: string;
        base: string;
        rounded: string;
        padding: string;
        size: string;
        color: string;
        container: string;
        active: string;
        inactive: string;
        selected: string;
        disabled: string;
        empty: string;
        icon: {
            base: string;
            active: string;
            inactive: string;
        };
        selectedIcon: {
            wrapper: string;
            padding: string;
            base: string;
        };
        avatar: {
            base: string;
            size: "2xs";
        };
        chip: {
            base: string;
        };
    };
    transition: {
        leaveActiveClass: string;
        leaveFromClass: string;
        leaveToClass: string;
    };
    popper: {
        placement: string;
    };
    default: {
        selectedIcon: string;
        clearSearchOnClose: boolean;
        showCreateOptionWhen: string;
    };
    arrow: {
        ring: string;
        background: string;
        base: string;
        rounded: string;
        shadow: string;
        placement: string;
    };
    container: string;
    trigger: string;
    width: string;
    height: string;
    base: string;
    background: string;
    shadow: string;
    rounded: string;
    padding: string;
    ring: string;
    empty: string;
};
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor | ObjectConstructor | ArrayConstructor)[];
        default: string;
    };
    query: {
        type: StringConstructor;
        default: any;
    };
    by: {
        type: StringConstructor;
        default: any;
    };
    options: {
        type: PropType<{
            [key: string]: any;
            disabled?: boolean;
        }[] | string[]>;
        default: () => any[];
    };
    id: {
        type: StringConstructor;
        default: any;
    };
    name: {
        type: StringConstructor;
        default: any;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: any;
    };
    loadingIcon: {
        type: StringConstructor;
        default: () => string;
    };
    leadingIcon: {
        type: StringConstructor;
        default: any;
    };
    trailingIcon: {
        type: StringConstructor;
        default: () => string;
    };
    trailing: {
        type: BooleanConstructor;
        default: boolean;
    };
    leading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectedIcon: {
        type: StringConstructor;
        default: () => string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    searchable: {
        type: PropType<boolean | ((query: string) => Promise<any[]> | any[])>;
        default: boolean;
    };
    searchablePlaceholder: {
        type: StringConstructor;
        default: string;
    };
    searchableLazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearSearchOnClose: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    debounce: {
        type: NumberConstructor;
        default: number;
    };
    creatable: {
        type: BooleanConstructor;
        default: boolean;
    };
    showCreateOptionWhen: {
        type: PropType<"always" | "empty" | ((query: string, results: any[]) => boolean)>;
        default: () => string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    padded: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<SelectSize>;
        default: any;
        validator(value: string): boolean;
    };
    color: {
        type: PropType<SelectColor>;
        default: () => string;
        validator(value: string): boolean;
    };
    variant: {
        type: PropType<SelectVariant>;
        default: () => string;
        validator(value: string): boolean;
    };
    optionAttribute: {
        type: StringConstructor;
        default: string;
    };
    valueAttribute: {
        type: StringConstructor;
        default: any;
    };
    searchAttributes: {
        type: ArrayConstructor;
        default: any;
    };
    popper: {
        type: PropType<PopperOptions>;
        default: () => {};
    };
    selectClass: {
        type: StringConstructor;
        default: any;
    };
    class: {
        type: PropType<any>;
        default: () => "";
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
    uiMenu: {
        type: PropType<Partial<typeof configMenu> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}, {
    ui: import("vue").ComputedRef<{
        form: string;
        placeholder: string;
        default: {
            size: string;
            color: string;
            variant: string;
            loadingIcon: string;
            trailingIcon: string;
        };
        wrapper: string;
        base: string;
        rounded: string;
        file: {
            base: string;
        };
        size: {
            '2xs': string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        gap: {
            '2xs': string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        padding: {
            '2xs': string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        leading: {
            padding: {
                '2xs': string;
                xs: string;
                sm: string;
                md: string;
                lg: string;
                xl: string;
            };
        };
        trailing: {
            padding: {
                '2xs': string;
                xs: string;
                sm: string;
                md: string;
                lg: string;
                xl: string;
            };
        };
        color: {
            white: {
                outline: string;
            };
            gray: {
                outline: string;
            };
        };
        variant: {
            outline: string;
            none: string;
        };
        icon: {
            base: string;
            color: string;
            loading: string;
            size: {
                '2xs': string;
                xs: string;
                sm: string;
                md: string;
                lg: string;
                xl: string;
            };
            leading: {
                wrapper: string;
                pointer: string;
                padding: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                };
            };
            trailing: {
                wrapper: string;
                pointer: string;
                padding: {
                    '2xs': string;
                    xs: string;
                    sm: string;
                    md: string;
                    lg: string;
                    xl: string;
                };
            };
        };
    }>;
    uiMenu: import("vue").ComputedRef<{
        select: string;
        input: string;
        required: string;
        label: string;
        option: {
            create: string;
            base: string;
            rounded: string;
            padding: string;
            size: string;
            color: string;
            container: string;
            active: string;
            inactive: string;
            selected: string;
            disabled: string;
            empty: string;
            icon: {
                base: string;
                active: string;
                inactive: string;
            };
            selectedIcon: {
                wrapper: string;
                padding: string;
                base: string;
            };
            avatar: {
                base: string;
                size: "2xs";
            };
            chip: {
                base: string;
            };
        };
        transition: {
            leaveActiveClass: string;
            leaveFromClass: string;
            leaveToClass: string;
        };
        popper: {
            placement: string;
        };
        default: {
            selectedIcon: string;
            clearSearchOnClose: boolean;
            showCreateOptionWhen: string;
        };
        arrow: {
            ring: string;
            background: string;
            base: string;
            rounded: string;
            shadow: string;
            placement: string;
        };
        container: string;
        trigger: string;
        width: string;
        height: string;
        base: string;
        background: string;
        shadow: string;
        rounded: string;
        padding: string;
        ring: string;
        empty: string;
    }>;
    attrs: import("vue").ComputedRef<Pick<{
        [x: string]: unknown;
    }, string>>;
    name: import("vue").ComputedRef<string>;
    inputId: import("vue").ComputedRef<string>;
    popper: import("vue").ComputedRef<PopperOptions>;
    trigger: import("vue").Ref<import("@vueuse/core").MaybeElement>;
    container: import("vue").Ref<import("@vueuse/core").MaybeElement>;
    selected: import("vue").ComputedRef<any>;
    label: import("vue").ComputedRef<any>;
    isLeading: import("vue").ComputedRef<string | true>;
    isTrailing: import("vue").ComputedRef<string | true>;
    selectClass: import("vue").ComputedRef<string>;
    leadingIconName: import("vue").ComputedRef<string>;
    leadingIconClass: import("vue").ComputedRef<string>;
    leadingWrapperIconClass: import("vue").ComputedRef<string>;
    trailingIconName: import("vue").ComputedRef<string>;
    trailingIconClass: import("vue").ComputedRef<string>;
    trailingWrapperIconClass: import("vue").ComputedRef<string>;
    filteredOptions: import("vue").ComputedRef<any[]>;
    createOption: import("vue").ComputedRef<string | {
        [x: string]: string;
    }>;
    query: import("vue").WritableComputedRef<string>;
    onUpdate: (value: any) => void;
    onQueryChange: (event: any) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "close" | "update:modelValue" | "open" | "update:query")[], "change" | "close" | "update:modelValue" | "open" | "update:query", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor | ObjectConstructor | ArrayConstructor)[];
        default: string;
    };
    query: {
        type: StringConstructor;
        default: any;
    };
    by: {
        type: StringConstructor;
        default: any;
    };
    options: {
        type: PropType<{
            [key: string]: any;
            disabled?: boolean;
        }[] | string[]>;
        default: () => any[];
    };
    id: {
        type: StringConstructor;
        default: any;
    };
    name: {
        type: StringConstructor;
        default: any;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: any;
    };
    loadingIcon: {
        type: StringConstructor;
        default: () => string;
    };
    leadingIcon: {
        type: StringConstructor;
        default: any;
    };
    trailingIcon: {
        type: StringConstructor;
        default: () => string;
    };
    trailing: {
        type: BooleanConstructor;
        default: boolean;
    };
    leading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectedIcon: {
        type: StringConstructor;
        default: () => string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    searchable: {
        type: PropType<boolean | ((query: string) => Promise<any[]> | any[])>;
        default: boolean;
    };
    searchablePlaceholder: {
        type: StringConstructor;
        default: string;
    };
    searchableLazy: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearSearchOnClose: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    debounce: {
        type: NumberConstructor;
        default: number;
    };
    creatable: {
        type: BooleanConstructor;
        default: boolean;
    };
    showCreateOptionWhen: {
        type: PropType<"always" | "empty" | ((query: string, results: any[]) => boolean)>;
        default: () => string;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    padded: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: PropType<SelectSize>;
        default: any;
        validator(value: string): boolean;
    };
    color: {
        type: PropType<SelectColor>;
        default: () => string;
        validator(value: string): boolean;
    };
    variant: {
        type: PropType<SelectVariant>;
        default: () => string;
        validator(value: string): boolean;
    };
    optionAttribute: {
        type: StringConstructor;
        default: string;
    };
    valueAttribute: {
        type: StringConstructor;
        default: any;
    };
    searchAttributes: {
        type: ArrayConstructor;
        default: any;
    };
    popper: {
        type: PropType<PopperOptions>;
        default: () => {};
    };
    selectClass: {
        type: StringConstructor;
        default: any;
    };
    class: {
        type: PropType<any>;
        default: () => "";
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
    uiMenu: {
        type: PropType<Partial<typeof configMenu> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}>> & {
    onChange?: (...args: any[]) => any;
    onClose?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
    onOpen?: (...args: any[]) => any;
    "onUpdate:query"?: (...args: any[]) => any;
}, {
    name: string;
    size: SelectSize;
    required: boolean;
    class: any;
    leading: boolean;
    popper: PopperOptions;
    color: SelectColor;
    variant: SelectVariant;
    disabled: boolean;
    ui: {};
    id: string;
    icon: string;
    options: string[] | {
        [key: string]: any;
        disabled?: boolean;
    }[];
    modelValue: string | number | boolean | Record<string, any> | unknown[];
    loading: boolean;
    padded: boolean;
    loadingIcon: string;
    leadingIcon: string;
    trailingIcon: string;
    trailing: boolean;
    by: string;
    multiple: boolean;
    placeholder: string;
    query: string;
    selectedIcon: string;
    optionAttribute: string;
    valueAttribute: string;
    searchAttributes: unknown[];
    debounce: number;
    uiMenu: {};
    selectClass: string;
    searchable: boolean | ((query: string) => Promise<any[]> | any[]);
    searchablePlaceholder: string;
    searchableLazy: boolean;
    clearSearchOnClose: boolean;
    creatable: boolean;
    showCreateOptionWhen: "empty" | "always" | ((query: string, results: any[]) => boolean);
}, {}>;
export default _default;
