import type { PropType } from 'vue';
import type { AccordionItem, Strategy } from '../../types/index.js';
declare const config: {
    wrapper: string;
    container: string;
    item: {
        base: string;
        size: string;
        color: string;
        padding: string;
        icon: string;
    };
    transition: {
        enterActiveClass: string;
        leaveActiveClass: string;
    };
    default: {
        openIcon: string;
        closeIcon: string;
        class: string;
        variant: "soft";
        truncate: boolean;
    };
};
declare const _default: import("vue").DefineComponent<{
    items: {
        type: PropType<AccordionItem[]>;
        default: () => any[];
    };
    defaultOpen: {
        type: BooleanConstructor;
        default: boolean;
    };
    openIcon: {
        type: StringConstructor;
        default: () => string;
    };
    unmount: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeIcon: {
        type: StringConstructor;
        default: () => string;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    class: {
        type: PropType<any>;
        default: () => string;
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}, {
    ui: import("vue").ComputedRef<{
        wrapper: string;
        container: string;
        item: {
            base: string;
            size: string;
            color: string;
            padding: string;
            icon: string;
        };
        transition: {
            enterActiveClass: string;
            leaveActiveClass: string;
        };
        default: {
            openIcon: string;
            closeIcon: string;
            class: string;
            variant: "soft";
            truncate: boolean;
        };
    }>;
    uiButton: import("vue").ComputedRef<{
        base: string;
        font: string;
        rounded: string;
        truncate: string;
        block: string;
        inline: string;
        size: {
            '2xs': string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        gap: {
            '2xs': string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        padding: {
            '2xs': string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        square: {
            '2xs': string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
        color: {
            white: {
                solid: string;
                ghost: string;
            };
            gray: {
                solid: string;
                ghost: string;
                link: string;
            };
            black: {
                solid: string;
                link: string;
            };
        };
        variant: {
            solid: string;
            outline: string;
            soft: string;
            ghost: string;
            link: string;
        };
        icon: {
            base: string;
            loading: string;
            size: {
                '2xs': string;
                xs: string;
                sm: string;
                md: string;
                lg: string;
                xl: string;
            };
        };
        default: {
            size: string;
            variant: string;
            color: string;
            loadingIcon: string;
        };
    }>;
    attrs: import("vue").ComputedRef<Pick<{
        [x: string]: unknown;
    }, string>>;
    buttonRefs: import("vue").Ref<{
        open: boolean;
        close: (e: EventTarget) => {};
    }[]>;
    closeOthers: (currentIndex: number, e: Event) => void;
    omit: any;
    onEnter: (_el: Element, done: () => void) => void;
    onBeforeLeave: (_el: Element) => void;
    onAfterEnter: (_el: Element) => void;
    onLeave: (_el: Element, done: () => void) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "open"[], "open", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    items: {
        type: PropType<AccordionItem[]>;
        default: () => any[];
    };
    defaultOpen: {
        type: BooleanConstructor;
        default: boolean;
    };
    openIcon: {
        type: StringConstructor;
        default: () => string;
    };
    unmount: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeIcon: {
        type: StringConstructor;
        default: () => string;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    class: {
        type: PropType<any>;
        default: () => string;
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}>> & {
    onOpen?: (...args: any[]) => any;
}, {
    class: any;
    ui: {};
    defaultOpen: boolean;
    unmount: boolean;
    items: AccordionItem[];
    openIcon: string;
    closeIcon: string;
    multiple: boolean;
}, {}>;
export default _default;
