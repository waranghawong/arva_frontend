import type { PropType } from 'vue';
import type { KbdSize, Strategy } from '../../types/index.js';
declare const config: {
    base: string;
    padding: string;
    size: {
        xs: string;
        sm: string;
        md: string;
    };
    rounded: string;
    font: string;
    background: string;
    ring: string;
    default: {
        size: string;
    };
};
declare const _default: import("vue").DefineComponent<{
    value: {
        type: StringConstructor;
        default: any;
    };
    size: {
        type: PropType<KbdSize>;
        default: () => string;
        validator(value: string): boolean;
    };
    class: {
        type: PropType<any>;
        default: () => "";
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}, {
    ui: import("vue").ComputedRef<{
        base: string;
        padding: string;
        size: {
            xs: string;
            sm: string;
            md: string;
        };
        rounded: string;
        font: string;
        background: string;
        ring: string;
        default: {
            size: string;
        };
    }>;
    attrs: import("vue").ComputedRef<Pick<{
        [x: string]: unknown;
    }, string>>;
    kbdClass: import("vue").ComputedRef<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    value: {
        type: StringConstructor;
        default: any;
    };
    size: {
        type: PropType<KbdSize>;
        default: () => string;
        validator(value: string): boolean;
    };
    class: {
        type: PropType<any>;
        default: () => "";
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}>>, {
    size: KbdSize;
    class: any;
    ui: {};
    value: string;
}, {}>;
export default _default;
