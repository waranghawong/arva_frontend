import type { PropType } from 'vue';
import type { BadgeColor, BadgeSize, BadgeVariant, Strategy } from '../../types/index.js';
declare const config: {
    base: string;
    rounded: string;
    font: string;
    size: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
    };
    color: {
        white: {
            solid: string;
        };
        gray: {
            solid: string;
        };
        black: {
            solid: string;
        };
    };
    variant: {
        solid: string;
        outline: string;
        soft: string;
        subtle: string;
    };
    default: {
        size: string;
        variant: string;
        color: string;
    };
};
declare const _default: import("vue").DefineComponent<{
    size: {
        type: PropType<BadgeSize>;
        default: () => string;
        validator(value: string): boolean;
    };
    color: {
        type: PropType<BadgeColor>;
        default: () => string;
        validator(value: string): boolean;
    };
    variant: {
        type: PropType<BadgeVariant>;
        default: () => string;
        validator(value: string): boolean;
    };
    label: {
        type: (StringConstructor | NumberConstructor)[];
        default: any;
    };
    class: {
        type: PropType<any>;
        default: () => "";
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}, {
    attrs: import("vue").ComputedRef<Pick<{
        [x: string]: unknown;
    }, string>>;
    badgeClass: import("vue").ComputedRef<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    size: {
        type: PropType<BadgeSize>;
        default: () => string;
        validator(value: string): boolean;
    };
    color: {
        type: PropType<BadgeColor>;
        default: () => string;
        validator(value: string): boolean;
    };
    variant: {
        type: PropType<BadgeVariant>;
        default: () => string;
        validator(value: string): boolean;
    };
    label: {
        type: (StringConstructor | NumberConstructor)[];
        default: any;
    };
    class: {
        type: PropType<any>;
        default: () => "";
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}>>, {
    size: BadgeSize;
    class: any;
    color: BadgeColor;
    variant: BadgeVariant;
    label: string | number;
    ui: {};
}, {}>;
export default _default;
