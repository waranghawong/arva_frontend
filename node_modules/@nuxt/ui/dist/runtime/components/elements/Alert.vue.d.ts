import type { PropType } from 'vue';
import type { Avatar, Button, AlertColor, AlertVariant, AlertAction, Strategy } from '../../types/index.js';
declare const config: {
    wrapper: string;
    inner: string;
    title: string;
    description: string;
    actions: string;
    shadow: string;
    rounded: string;
    padding: string;
    gap: string;
    icon: {
        base: string;
    };
    avatar: {
        base: string;
        size: "md";
    };
    color: {
        white: {
            solid: string;
        };
    };
    variant: {
        solid: string;
        outline: string;
        soft: string;
        subtle: string;
    };
    default: {
        color: string;
        variant: string;
        icon: any;
        closeButton: any;
        actionButton: {
            size: "xs";
            color: "primary";
            variant: "link";
        };
    };
};
declare const _default: import("vue").DefineComponent<{
    title: {
        type: StringConstructor;
        default: any;
    };
    description: {
        type: StringConstructor;
        default: any;
    };
    icon: {
        type: StringConstructor;
        default: () => any;
    };
    avatar: {
        type: PropType<Avatar>;
        default: any;
    };
    closeButton: {
        type: PropType<Button>;
        default: () => Button;
    };
    actions: {
        type: PropType<AlertAction[]>;
        default: () => any[];
    };
    color: {
        type: PropType<AlertColor>;
        default: () => string;
        validator(value: string): boolean;
    };
    variant: {
        type: PropType<AlertVariant>;
        default: () => string;
        validator(value: string): boolean;
    };
    class: {
        type: PropType<any>;
        default: () => "";
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}, {
    ui: import("vue").ComputedRef<{
        wrapper: string;
        inner: string;
        title: string;
        description: string;
        actions: string;
        shadow: string;
        rounded: string;
        padding: string;
        gap: string;
        icon: {
            base: string;
        };
        avatar: {
            base: string;
            size: "md";
        };
        color: {
            white: {
                solid: string;
            };
        };
        variant: {
            solid: string;
            outline: string;
            soft: string;
            subtle: string;
        };
        default: {
            color: string;
            variant: string;
            icon: any;
            closeButton: any;
            actionButton: {
                size: "xs";
                color: "primary";
                variant: "link";
            };
        };
    }>;
    attrs: import("vue").ComputedRef<Pick<{
        [x: string]: unknown;
    }, string>>;
    alertClass: import("vue").ComputedRef<string>;
    onAction: (action: AlertAction) => void;
    twMerge: (...classLists: import("tailwind-merge").ClassNameValue[]) => string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "close"[], "close", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    title: {
        type: StringConstructor;
        default: any;
    };
    description: {
        type: StringConstructor;
        default: any;
    };
    icon: {
        type: StringConstructor;
        default: () => any;
    };
    avatar: {
        type: PropType<Avatar>;
        default: any;
    };
    closeButton: {
        type: PropType<Button>;
        default: () => Button;
    };
    actions: {
        type: PropType<AlertAction[]>;
        default: () => any[];
    };
    color: {
        type: PropType<AlertColor>;
        default: () => string;
        validator(value: string): boolean;
    };
    variant: {
        type: PropType<AlertVariant>;
        default: () => string;
        validator(value: string): boolean;
    };
    class: {
        type: PropType<any>;
        default: () => "";
    };
    ui: {
        type: PropType<Partial<typeof config> & {
            strategy?: Strategy;
        }>;
        default: () => {};
    };
}>> & {
    onClose?: (...args: any[]) => any;
}, {
    class: any;
    avatar: any;
    color: AlertColor;
    variant: AlertVariant;
    title: string;
    ui: {};
    description: string;
    icon: string;
    closeButton: Button;
    actions: AlertAction[];
}, {}>;
export default _default;
