import type { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    content: {
        type: PropType<string | number | Record<string, any> | (() => import("vue").Component) | undefined>;
        required: true;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    theme: {
        type: PropType<import("../../types").NinjaToasterTheme | undefined>;
        default: () => {};
    };
    dismissible: {
        type: BooleanConstructor;
        default: boolean;
    };
    pauseOnHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    queues: {
        type: PropType<Map<string, {
            add: (item: import("../queue").NinjaToasterQueue) => () => void;
            remove: (item: import("../queue").NinjaToasterQueue) => void;
            clear: () => void;
        }>>;
        default: () => Map<any, any>;
    };
    events: {
        type: PropType<{
            queue: Record<string, import("../events").NinjaToasterEventCallback[]>;
            on: (name: string, callback: import("../events").NinjaToasterEventCallback) => void;
            off: (name: string, callback: import("../events").NinjaToasterEventCallback) => void;
            emit: (name: string, ...args: any) => void;
        }>;
        default: () => {};
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("close" | "click" | "show")[], "close" | "click" | "show", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    content: {
        type: PropType<string | number | Record<string, any> | (() => import("vue").Component) | undefined>;
        required: true;
    };
    duration: {
        type: NumberConstructor;
        default: number;
    };
    theme: {
        type: PropType<import("../../types").NinjaToasterTheme | undefined>;
        default: () => {};
    };
    dismissible: {
        type: BooleanConstructor;
        default: boolean;
    };
    pauseOnHover: {
        type: BooleanConstructor;
        default: boolean;
    };
    queues: {
        type: PropType<Map<string, {
            add: (item: import("../queue").NinjaToasterQueue) => () => void;
            remove: (item: import("../queue").NinjaToasterQueue) => void;
            clear: () => void;
        }>>;
        default: () => Map<any, any>;
    };
    events: {
        type: PropType<{
            queue: Record<string, import("../events").NinjaToasterEventCallback[]>;
            on: (name: string, callback: import("../events").NinjaToasterEventCallback) => void;
            off: (name: string, callback: import("../events").NinjaToasterEventCallback) => void;
            emit: (name: string, ...args: any) => void;
        }>;
        default: () => {};
    };
}>> & {
    onShow?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
}, {
    duration: number;
    theme: import("../../types").NinjaToasterTheme | undefined;
    dismissible: boolean;
    pauseOnHover: boolean;
    queues: Map<string, {
        add: (item: import("../queue").NinjaToasterQueue) => () => void;
        remove: (item: import("../queue").NinjaToasterQueue) => void;
        clear: () => void;
    }>;
    events: {
        queue: Record<string, import("../events").NinjaToasterEventCallback[]>;
        on: (name: string, callback: import("../events").NinjaToasterEventCallback) => void;
        off: (name: string, callback: import("../events").NinjaToasterEventCallback) => void;
        emit: (name: string, ...args: any) => void;
    };
}>;
export default _default;
