import { h, render } from "vue";
import { defu } from "defu";
import { createEventBus } from "./events.mjs";
import NinjaToaster from "./components/NinjaToaster.mjs";
import { resolveComponent, useAppConfig, useNuxtApp } from "#imports";
function createElement() {
  if (process.server) {
    return null;
  }
  return document.createElement("div");
}
function mountWithContext(app, component, props) {
  const el = createElement();
  if (el) {
    const vNode = h(component, props);
    if (app && app._context) {
      vNode.appContext = app._context;
    }
    render(vNode, el);
  }
}
function ensureClassesArray(theme) {
  if (theme?.containerClass && !Array.isArray(theme.containerClass)) {
    theme.containerClass = [theme.containerClass];
  }
  if (theme?.wrapperClass && !Array.isArray(theme.wrapperClass)) {
    theme.wrapperClass = [theme.wrapperClass];
  }
}
export function createNinjaToaster(createProps = {}) {
  const events = createEventBus();
  const queues = /* @__PURE__ */ new Map();
  function showComponent(name, {
    props,
    children,
    options
  }) {
    const content = () => h(resolveComponent(name), props, children);
    return show({
      ...options,
      content
    });
  }
  function show(options) {
    const appConfigProps = useAppConfig()?.toaster;
    const app = useNuxtApp().vueApp;
    const userProps = typeof options === "string" || typeof options === "number" || typeof options === "function" ? { content: options } : options;
    ensureClassesArray(userProps?.theme);
    ensureClassesArray(createProps?.theme);
    ensureClassesArray(appConfigProps?.theme);
    const props = defu(
      userProps,
      createProps,
      appConfigProps
    );
    return new Promise((resolve) => {
      mountWithContext(app, NinjaToaster, {
        ...props,
        events,
        queues,
        onShow: (toast) => {
          resolve(toast);
          if (props.onShow) {
            props.onShow(toast);
          }
        }
      });
      if (process.server) {
        resolve({
          el: null,
          close: () => {
          }
        });
      }
    });
  }
  function clearAll() {
    events.emit("clear");
    queues.forEach((queue) => {
      queue.clear();
    });
    queues.clear();
  }
  function clear(theme) {
    const containerId = typeof theme === "string" ? theme : theme.containerId ?? "nt-container";
    events.emit(`clear-${containerId}`);
    if (queues.has(containerId)) {
      queues.get(containerId)?.clear();
    }
  }
  return {
    show,
    showComponent,
    clearAll,
    clear
  };
}
