import { computed, inject, provide, ref } from "vue";
import { tryOnBeforeUnmount, tryOnMounted } from "@vueuse/core";
export const NinjaToasterStateKey = Symbol.for(
  "NinjaToasterState"
);
export function createNinjaToasterState(state) {
  provide(NinjaToasterStateKey, state);
}
export function useNinjaToasterState() {
  const state = inject(NinjaToasterStateKey);
  if (!state) {
    throw new Error("NinjaToasterState is not provided");
  }
  return state;
}
export function useNinjaToasterProgress() {
  const state = useNinjaToasterState();
  const now = ref(Date.now());
  const endAt = computed(() => {
    return state.timer.startedAt.value + state.timer.remaining.value;
  });
  const closeIn = computed(() => {
    return now.value - endAt.value;
  });
  const percent = computed(() => {
    if (!state.duration) {
      return 0;
    }
    const ratio = 1 - Math.max(0, Math.abs(closeIn.value)) / state.duration;
    return Math.round(ratio * 1e3) / 1e3;
  });
  let interval;
  tryOnMounted(() => {
    interval = setInterval(() => {
      if (!state.isHovered.value) {
        now.value = Date.now();
      }
    }, 16);
  });
  tryOnBeforeUnmount(() => {
    clearInterval(interval);
    interval = void 0;
  });
  return {
    percent,
    endAt,
    closeIn
  };
}
